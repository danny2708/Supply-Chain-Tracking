# app/management/commands/listen_events.py
import time
from django.core.management.base import BaseCommand
from app.services.blockchain_service import supply_chain_contract
from products.models import Product
from tracking.models import TrackingEvent # Import model Django c·ªßa b·∫°n

class Command(BaseCommand):
    help = 'L·∫Øng nghe s·ª± ki·ªán t·ª´ Smart Contract v√† ƒë·ªìng b·ªô v√†o DB'

    def handle(self, *args, **options):
        self.stdout.write("üéß B·∫Øt ƒë·∫ßu l·∫Øng nghe s·ª± ki·ªán blockchain...")

        # T·∫°o filter cho c√°c s·ª± ki·ªán b·∫°n quan t√¢m
        product_filter = supply_chain_contract.events.ProductCreated.create_filter(fromBlock='latest')
        stage_filter = supply_chain_contract.events.StageUpdated.create_filter(fromBlock='latest')

        while True:
            try:
                # L·∫Øng nghe s·ª± ki·ªán ProductCreated
                for event in product_filter.get_new_entries():
                    self.handle_product_created(event)

                # L·∫Øng nghe s·ª± ki·ªán StageUpdated
                for event in stage_filter.get_new_entries():
                    self.handle_stage_updated(event)

                time.sleep(2) # Ngh·ªâ 2 gi√¢y
            except Exception as e:
                self.stderr.write(f"L·ªói listener: {e}")
                time.sleep(10) # Ch·ªù 10 gi√¢y r·ªìi th·ª≠ l·∫°i

    def handle_product_created(self, event):
        args = event.args
        self.stdout.write(f"üéâ S·ª± ki·ªán ProductCreated: ID {args.id}")

        # D√πng Django ORM ƒë·ªÉ t·∫°o b·∫£n ghi m·ªõi trong b·∫£ng 'product'
        # (Gi·∫£ s·ª≠ model Product c·ªßa b·∫°n kh·ªõp v·ªõi s∆° ƒë·ªì)
        Product.objects.get_or_create(
            product_id=args.id,
            defaults={
                'name': args.name,
                'user_id': args.owner # Ho·∫∑c b·∫°n c·∫ßn map address sang user_id
            }
        )

    def handle_stage_updated(self, event):
        args = event.args
        self.stdout.write(f"üîî S·ª± ki·ªán StageUpdated: ID {args.id}, Stage {args.newStage}")

        # D√πng Django ORM ƒë·ªÉ t·∫°o b·∫£n ghi m·ªõi trong b·∫£ng 'tracking_event'
        TrackingEvent.objects.create(
            product_id=args.id,
            transaction_id=event.transactionHash.hex(), # L∆∞u tx_hash
            note=args.note,
            stage=args.newStage
            # ...
        )

        # ƒê·ªìng th·ªùi c·∫≠p nh·∫≠t stage m·ªõi nh·∫•t trong b·∫£ng 'product'
        Product.objects.filter(product_id=args.id).update(stage=args.newStage)